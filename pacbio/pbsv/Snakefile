#!/usr/bin/env python

# ref = '/home/adf/seqoccin/data/reference/hs37d5_hsa10.fa'
import pandas as pd
import pathlib
from pprint import pprint

samples = pd.read_table(config['samples']).set_index('sample', drop=False)

###############################################################
### Method
###############################################################
def get_files(wildcards):
	''' Parse the samples.txt file
	'''
	files = samples.loc[wildcards.sample, 'path'].split(',')
	return(files)

def write_fofn(wildcards):
	''' write a fofn file based on samples.txt information
	the file is named depending on submitted datatypes for CLR and CCS differentiation
	'''
	files = get_files(wildcards)
	fofnName = ''
	suffixes = map(get_suffix, files)
	test = list(set(suffixes))

	pathlib.Path("fofn").mkdir(parents=True, exist_ok=True)

	if (len(test) > 1):
		raise Exception('''You got several datatypes for sample {}. 
You have to analyze CLR and HiFi data separatedly.'''.format(wildcards.sample))
	else:
		if (test[0].endswith('subreads.bam')):
			fofnName = 'fofn/'+wildcards.sample+'_subreads.fofn'
		elif (test[0].endswith('fastq.gz') or test[0].endswith('fq.gz')):
			fofnName = 'fofn/'+wildcards.sample+'_fastq.fofn'

	with open(fofnName, 'w') as fh:
		for f in files:
			fh.write(f+"\n")
	return(fofnName)

def get_suffix(string):
	''' Return path file suffixes
	'''
	return(''.join(pathlib.Path(string).suffixes))

###############################################################
### Rule
###############################################################
rule all:
	''' Generic all rule to launch the full pipeline
	'''
	input:
	# do not get the default rule thingy
		expand("{sample}-pbmm2.vcf", sample=samples.index)

rule pbmm2_fastq:
	''' rule to align reads with minimap2 wrapper from fastq file
	generally, fastq file input is used for HiFi reads coming out of CCS
	'''
	input:
		fofn = write_fofn
		# "{sample}.fastq.gz"
		# ~ lambda wildcards: config['sample'][wildcards.sample]
	output:
		bam="{sample}-pbmm2.bam",
		bai="{sample}-pbmm2.bai"
	log:
		"logs/pbmm2/{sample}.log"
	benchmark:
		"bench/{sample}.pbmm2.benchmark.txt"
	params:
		rg = "@RG\tID:movie{sample}"
	conda:
		'envs/pbsv_env.yaml'
	threads: 10
	shell:
		# ~ "pbmm2 align "+ref+" {input.fofn} {output.bam} --sort -j {threads} -J {threads} --sample test "
		"pbmm2 align "+config['ref']+" {input} {output.bam} --sort -j {threads} -J {threads} --sample test "
		"--preset CCS " # only if CCS
		"--rg '@RG\tID:movieTest' " # only if from fastq, not ok for subreads.bam
		# should change the above to "--rg {params.rg}"
		" 2> {log}"

# ~ rule pbmm2_subreads:
	''' rule to align reads with minimap2 wrapper from subreads.bam file
	Best option for CLR reads
	Need to know if CCS preset can launch ccs software and so, take care of HiFi reads
	'''
	# ~ input:
		# ~ "{sample}.subreads.bam"
	# ~ output:
		# ~ bam="{sample}-pbmm2.bam",
		# ~ bai="{sample}-pbmm2.bai"
	# ~ threads: 10 # max, will be reduce if less is given to snakemake
	# ~ shell:
		# ~ "pbmm2 align "+ref+" {input} {output.bam} --sort -j {threads} -J {threads} --sample test "
		# ~ "--preset CCS " # only if CCS

rule pbsv_discover:
	''' first rule for sv detection, use bam to look for regions with possible variants
	'''
	input:
		"{sample}-pbmm2.bam"
	output:
		"{sample}-pbmm2.svig.gz"
	log:
		"logs/pbsv/{sample}_discover.log"
	conda:
		'envs/pbsv_env.yaml'
	shell:
		"pbsv discover {input} {output}"
		" 2> {log}"

rule pbsv_call:
	''' second rule for sv detection, use svig information to call variants
	'''
	input:
		"{sample}-pbmm2.svig.gz"
	output:
		"{sample}-pbmm2.vcf"
	log:
		"logs/pbsv/{sample}_call.log"
	benchmark:
		"bench/{sample}.pbsvCall.benchmark.txt"
	conda:
		'envs/pbsv_env.yaml'
	shell:
		# ~ "pbsv call "+ref+" {input} {output}"
		# ~ "pbsv call {config.ref} {input} {output}"
		"pbsv call "+config['ref']+" {input} {output}"
		" 2> {log}"
